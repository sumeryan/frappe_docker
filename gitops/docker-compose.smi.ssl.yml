name: smi
services:
  backend:
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: arteris-smi:1.0.0
    networks:
      default: null
    platform: linux/amd64
    pull_policy: missing
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
      - type: volume
        source: apps
        target: /home/frappe/frappe-bench/apps
        volume: {}
      - type: bind
        source: ./ssl-certs
        target: /etc/nginx/conf.d/ssl
      - type: bind
        source: ./backup
        target: /tmp/backup
  configurator:
    command:
      - |
        ls -1 apps > sites/apps.txt;
        
        # Copiar arquivos customizados
        # cp -f /tmp/custom-files/app.py apps/frappe/frappe/app.py;
        # cp -f /tmp/custom-files/login.html apps/frappe/frappe/www/login.html;
        
        # Criar site se necessário
        # if [ ! -d "sites/smi.arteris.com.br" ]; then
        #  bench new-site smi.arteris.com.br --db-root-password=$$DB_ROOT_PASSWORD --admin-password=admin --no-mariadb-socket
        # fi
        # echo "smi.arteris.com.br" > sites/currentsite.txt;
        
        # Configurações básicas
        bench set-config -g db_host $$DB_HOST; 
        bench set-config -gp db_port $$DB_PORT; 
        bench set-config -g redis_cache "redis://$$REDIS_CACHE"; 
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE"; 
        bench set-config -g redis_socketio "redis://$$REDIS_QUEUE"; 
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
        
        # CONFIGURAÇÕES DE SEGURANÇA CRÍTICAS
        bench set-config -g secure_cookies 1;
        bench set-config -g use_ssl 1;
        bench set-config -g force_https 1;
        bench set-config -g cookie_secure 1;
        bench set-config -g session_cookie_secure 1;
        bench set-config -g session_cookie_httponly 1;
        bench set-config -g csrf_cookie_secure 1;
        bench set-config -g csrf_cookie_httponly 1;
        bench set-config -g session_cookie_samesite "Strict";
        bench set-config -g csrf_cookie_samesite "Strict";
        
        # Configurações anti-disclosure
        bench set-config -g developer_mode 0;
        bench set-config -g server_script_enabled 0;
        bench set-config -g hide_footer 1;
        bench set-config -g disable_signup 1;
        bench set-config -g login_with_email_link 0;

        # CONFIGURAÇÃO CRÍTICA DO SOCKETIO
        bench set-config -g socketio_default_port 9000;
        bench --site smi.arteris.com.br set-config socketio_port 9000;
        bench --site smi.arteris.com.br set-config allow_cors "*";
        bench --site smi.arteris.com.br set-config cors_allowed_origins "https://smi.arteris.com.br";        

    depends_on:
      db:
        condition: service_healthy
        required: true
      redis-cache:
        condition: service_started
        required: true
      redis-queue:
        condition: service_started
        required: true
    entrypoint:
      - bash
      - -c
    environment:
      DB_HOST: db
      DB_PORT: "3306"
      DB_ROOT_PASSWORD: BtQEprm1Re5QDjY
      REDIS_CACHE: redis-cache:6379
      REDIS_QUEUE: redis-queue:6379
      SOCKETIO_PORT: "9000"
    image: arteris-smi:1.0.0
    networks:
      default: null
    platform: linux/amd64
    pull_policy: missing
    restart: on-failure
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
      - type: volume
        source: apps
        target: /home/frappe/frappe-bench/apps
        volume: {}
      - type: bind
        source: ./frappe/app.py
        target: /tmp/custom-files/app.py
      - type: bind
        source: ./frappe/login.html
        target: /tmp/custom-files/login.html
  db:
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
    environment:
      MYSQL_ROOT_PASSWORD: BtQEprm1Re5QDjY
    healthcheck:
      test:
        - CMD-SHELL
        - mariadb-admin ping -h localhost --password=BtQEprm1Re5QDjY
      interval: 1s
      retries: 20
    image: mariadb:11.7
    networks:
      default: null
    restart: unless-stopped
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/mysql
        volume: {}
  frontend:
    command:
      - nginx-entrypoint.sh
    depends_on:
      backend:
        condition: service_started
        required: true
      websocket:
        condition: service_started
        required: true
    environment:
      BACKEND: backend:8000
      CLIENT_MAX_BODY_SIZE: 50m
      FRAPPE_SITE_NAME_HEADER: $$host
      PROXY_READ_TIMEOUT: "120"
      SOCKETIO: websocket:9000
      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
      UPSTREAM_REAL_IP_RECURSIVE: "off"
      NGINX_SERVER_TOKENS: "off"  # Ocultar versão do nginx
    image: arteris-smi:1.0.0
    labels:
      traefik.enable: "true"
      traefik.http.routers.frontend-http.entrypoints: websecure
      traefik.http.routers.frontend-http.rule: Host(`smi.arteris.com.br`)
      traefik.http.routers.frontend-http.tls: "true"
      traefik.http.services.frontend.loadbalancer.server.port: "8080"
      # Middlewares completos
      traefik.http.routers.frontend-http.middlewares: complete-security@docker #,rate-limit@docker
      
      # HEADERS DE SEGURANÇA COMPLETOS
      traefik.http.middlewares.complete-security.headers.customFrameOptionsValue: DENY
      traefik.http.middlewares.complete-security.headers.contentTypeNosniff: true
      traefik.http.middlewares.complete-security.headers.browserXssFilter: true
      traefik.http.middlewares.complete-security.headers.stsSeconds: 31536000
      traefik.http.middlewares.complete-security.headers.stsIncludeSubdomains: true
      traefik.http.middlewares.complete-security.headers.stsPreload: true
      traefik.http.middlewares.complete-security.headers.forceSTSHeader: true
      traefik.http.middlewares.complete-security.headers.referrerPolicy: strict-origin-when-cross-origin
      
      # Headers customizados para resolver problemas específicos
      traefik.http.middlewares.complete-security.headers.customResponseHeaders.Server: ""
      traefik.http.middlewares.complete-security.headers.customResponseHeaders.X-Powered-By: ""
      traefik.http.middlewares.complete-security.headers.customResponseHeaders.X-Content-Type-Options: nosniff
      traefik.http.middlewares.complete-security.headers.customResponseHeaders.X-XSS-Protection: "1; mode=block"
      
      # CSP rigoroso mas funcional
      traefik.http.middlewares.complete-security.headers.contentSecurityPolicy: >-
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com;
        style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com;
        img-src 'self' data: blob: https:;
        font-src 'self' data: https://cdnjs.cloudflare.com;
        connect-src 'self' wss: ws:;
        frame-ancestors 'none';
        base-uri 'self';
        form-action 'self';
        object-src 'none';
        upgrade-insecure-requests;
      # Rate limiting
      traefik.http.middlewares.rate-limit.ratelimit.average: 100
      traefik.http.middlewares.rate-limit.ratelimit.burst: 200
    networks:
      default: null
    platform: linux/amd64
    pull_policy: missing
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
      - type: volume
        source: apps
        target: /home/frappe/frappe-bench/apps
        volume: {}
      - type: bind
        source: ./ssl-certs
        target: /etc/nginx/conf.d/ssl
      - type: bind
        source: ./nginx-custom
        target: /etc/nginx/conf.d/custom        
  proxy:
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      #- --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      # Configuração global de TLS
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.options=default
      - --providers.file.filename=/etc/traefik/traefik-tls.yml      
    image: traefik:v2.11
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "80"
        protocol: tcp
      - mode: ingress
        target: 443
        published: "443"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: ./ssl-certs
        target: /etc/ssl/certs
      - type: bind
        source: ./traefik
        target: /etc/traefik/dynamic
      - type: bind
        source: ./traefik-tls.yml
        target: /etc/traefik/traefik-tls.yml        
  queue-long:
    command:
      - bench
      - worker
      - --queue
      - long,default,short
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: arteris-smi:1.0.0
    networks:
      default: null
    platform: linux/amd64
    pull_policy: missing
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
      - type: volume
        source: apps
        target: /home/frappe/frappe-bench/apps
        volume: {}
  queue-short:
    command:
      - bench
      - worker
      - --queue
      - short,default
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: arteris-smi:1.0.0
    networks:
      default: null
    platform: linux/amd64
    pull_policy: missing
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
      - type: volume
        source: apps
        target: /home/frappe/frappe-bench/apps
        volume: {}
  redis-cache:
    image: redis:6.2-alpine
    networks:
      default: null
    restart: unless-stopped
  redis-queue:
    image: redis:6.2-alpine
    networks:
      default: null
    restart: unless-stopped
    volumes:
      - type: volume
        source: redis-queue-data
        target: /data
        volume: {}
  scheduler:
    command:
      - bench
      - schedule
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: arteris-smi:1.0.0
    networks:
      default: null
    platform: linux/amd64
    pull_policy: missing
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
      - type: volume
        source: apps
        target: /home/frappe/frappe-bench/apps
        volume: {}
  websocket:
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    environment:
      FRAPPE_SITE_NAME_HEADER: smi.arteris.com.br
      SITE_NAME: smi.arteris.com.br
      ALLOWED_ORIGINS: "https://smi.arteris.com.br"
    # labels:
    #   traefik.enable: "true"
    #   traefik.http.services.websocket.loadbalancer.server.port: "9000"
    #   traefik.http.routers.websocket.rule: Host(`smi.arteris.com.br`) && PathPrefix(`/socket.io/`)
    #   traefik.http.routers.websocket.entrypoints: websecure
    #   traefik.http.routers.websocket.tls: "true"      
    #   traefik.http.middlewares.websocket-cors.headers.customRequestHeaders.Origin: "https://smi.arteris.com.br"
    #   traefik.http.middlewares.websocket-cors.headers.customRequestHeaders.Host: "smi.arteris.com.br"
    #   traefik.http.routers.websocket.middlewares: websocket-cors        
    image: arteris-smi:1.0.0
    networks:
      default: null
    platform: linux/amd64
    pull_policy: missing
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
      - type: volume
        source: apps
        target: /home/frappe/frappe-bench/apps
        volume: {}
  sftp:
    image: atmoz/sftp:alpine
    container_name: smi-sftp
    restart: unless-stopped
    networks:
      default: null
    ports:
      - mode: ingress
        target: 22
        published: "6522"  
        protocol: tcp
    volumes:
      - type: bind
        source: /ftp/arteris
        target: /home/arteris/upload
        bind:
          create_host_path: true
      - type: volume
        source: sftp-ssh-keys
        target: /etc/ssh/keys
        volume: {}
    environment:
      SFTP_USERS: "arteris:${SFTP_PASSWORD:-Art3r1s@2024}:1001:1001:upload"
      SFTP_ENABLE_PASSWORD_AUTH: "true"
      SFTP_ENABLE_ROOT_LOGIN: "false"
      SFTP_LOG_LEVEL: "VERBOSE"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "22"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      com.arteris.service: "sftp"
      com.arteris.description: "Servidor SFTP para transferência segura de arquivos"
networks:
  default:
    name: smi_default
volumes:
  apps:
    name: smi_apps
  db-data:
    name: smi_db-data
  redis-queue-data:
    name: smi_redis-queue-data
  sites:
    name: smi_sites
  sftp-ssh-keys: 
    name: smi_sftp-ssh-keys    
x-backend-defaults:
  depends_on:
    configurator:
      condition: service_completed_successfully
  image: arteris-smi:1.0.0
  pull_policy: if_not_present
  restart: unless-stopped
  volumes:
    - sites:/home/frappe/frappe-bench/sites
    - apps:/home/frappe/frappe-bench/apps
x-customizable-image:
  image: arteris-smi:1.0.0
  pull_policy: if_not_present
  restart: unless-stopped
x-depends-on-configurator:
  depends_on:
    configurator:
      condition: service_completed_successfully